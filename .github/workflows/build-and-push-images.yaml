name: For Full CICD - Build and push images

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      environment_name:
        required: true
        type: string
      list_services_names:
        required: true
        type: string
      unlock_featest:
        required: false
        type: boolean
        default: false
        description: 'Set to true to only unlock featest environment (skips deployment)'
    outputs:
      image_tag:
        description: "The generated image tag (commit hash)"
        value: ${{ jobs.generate_tag.outputs.image_tag }}

jobs:

  lock-featest:
    if: ${{ (inputs.environment_name || github.event.inputs.environment_name) == 'featest' }}
    permissions:
      contents: read
      issues: write
    uses: ./.github/workflows/lock-environment.yaml
    with:
      action: ${{ (inputs.unlock_featest == true || github.event.inputs.unlock_featest == 'true') && 'unlock' || 'lock' }}

  generate_tag:
    needs: [lock-featest]
    if: |
      (needs.lock-featest.result == 'success' || needs.lock-featest.result == 'skipped') &&
      (inputs.unlock_featest != true && github.event.inputs.unlock_featest != 'true')
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
    steps:
      - name: Set image tag
        id: set-tag
        env:
          ENV_TAG: ${{ inputs.environment_name }}
        run: |
          SHORT_SHA="${{ github.sha }}"
          SHORT_SHA="${SHORT_SHA:0:7}"
          FULL_TAG="${ENV_TAG}-${SHORT_SHA}"
          echo "image_tag=${FULL_TAG}" >> $GITHUB_OUTPUT

  build_and_push:
    needs: generate_tag
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        service:
          - name: accessor
            context: backend/ContainerApp/Accessor
            dockerfile: backend/ContainerApp/Accessor/Dockerfile
          - name: manager
            context: backend/ContainerApp/Manager
            dockerfile: backend/ContainerApp/Manager/Dockerfile
          - name: engine
            context: backend/ContainerApp/Engine
            dockerfile: backend/ContainerApp/Engine/Dockerfile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set ACR environment
        run: |
          ACR_NAME=teachindevacr
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
          echo "ACR_LOGIN_SERVER=$ACR_NAME.azurecr.io" >> $GITHUB_ENV

      - name: Log in to Azure Container Registry
        run: az acr login --name $ACR_NAME

      - name: Set image tags
        id: imgtag
        shell: bash
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_SHA: ${{ github.sha }}
          ENV_TAG: ${{ inputs.environment_name }}
        run: |
          ACR_LOGIN_SERVER="teachindevacr.azurecr.io"
          IMAGE_NAME="${ACR_LOGIN_SERVER}/${{ matrix.service.name }}"
          
          # Extract first 7 characters of commit SHA
          SHORT_SHA="${GITHUB_SHA:0:7}"
          
          # Start building tags output
          {
            echo "tags<<EOF"
            # Add latest tag only for push events
            if [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
              echo "${IMAGE_NAME}:latest"
            fi
            # Always add these two tags
            echo "${IMAGE_NAME}:${ENV_TAG}-${SHORT_SHA}"
            echo "${IMAGE_NAME}:${ENV_TAG}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Build and push ${{ matrix.service.name }} image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: |
            ${{ steps.imgtag.outputs.tags }}