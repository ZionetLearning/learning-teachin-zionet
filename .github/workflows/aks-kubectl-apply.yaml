name: AKS - Platform Setup (Ingress/Dapr/Monitoring)

run-name: >
  ⚙️ AKS Platform Setup | Environment: ${{ 
    inputs.environment_name || github.event.inputs.environment_name 
  }} | GitHub Env: ${{ inputs.environment || github.event.inputs.environment }}

on:

  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment (GitHub Environment)'
        required: true
        default: 'Development'
        type: choice
        options: [Development, Production]
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      environment_name:
        required: false
        type: string
    outputs:
      ingress_url:
        description: "http://<ingress external IP>"
        value: ${{ jobs.platform.outputs.ingress_url }}

jobs:
  platform:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up variables
        run: |
          # Directory for K8S manifests
          echo "K8S_DIR=devops/kubernetes/" >> $GITHUB_ENV

          # Shared AKS
          echo "AKS_RG=dev-zionet-learning-2025" >> $GITHUB_ENV
          echo "AKS_NAME=aks-cluster-dev" >> $GITHUB_ENV

      - name: Get AKS credentials
        run: az aks get-credentials --resource-group $AKS_RG --name $AKS_NAME --overwrite-existing

      - name: Install/Upgrade Dapr control plane
        run: |
          cd devops/helm-tools
          chmod +x dapr-control-plane.sh
          ./dapr-control-plane.sh

      - name: Setup ingress controller
        run: |
          cd devops/helm-tools
          chmod +x setup-ingress-controller.sh
          ./setup-ingress-controller.sh

      - name: Add Grafana
        run: |
          cd devops/helm-tools/grafana
          chmod +x grafana.sh
          ./grafana.sh
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
      
      ###### This is one time only!! Never use unless the whole RG is wiped out
      # - name: Setup HTTPS certificates
      #   run: |
      #     cd devops/helm-tools
      #     chmod +x setup-https.sh
      #     ./setup-https.sh

      - name: Apply Grafana ingress (only)
        run: kubectl apply -f "$K8S_DIR/ingress/grafana-ingress.yaml"

      - name: Add Prometheus
        run: |
          cd devops/helm-tools/prometheus
          chmod +x prometheus.sh
          ./prometheus.sh

      - name: Add Loki (logs stack)
        run: |
          cd devops/helm-tools/loki
          chmod +x loki.sh
          ./loki.sh

      - name: Configure Azure Monitor datasource in Grafana
        run: |
          cd devops/helm-tools/azure-monitor
          chmod +x azure-monitor.sh
          ./azure-monitor.sh
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_APPLICATION_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}


      # - name: Create devops-tools namespace
      #   run: |
      #     echo "Creating devops-tools namespace..."
      #     kubectl create namespace devops-tools --dry-run=client -o yaml | kubectl apply -f -
          
      #     # Wait for namespace to be ready
      #     kubectl wait --for=condition=ready namespace/devops-tools --timeout=60s || true
          
      #     echo "✅ devops-tools namespace is ready"

      # - name: Add Langfuse
      #   run: |
      #     echo "Deploying Langfuse..."
      #     cd devops/helm-tools
      #     chmod +x langfuse.sh
      #     ./langfuse.sh dev "${{ secrets.LANGFUSE_ADMIN_EMAIL }}" "${{ secrets.LANGFUSE_ADMIN_PASSWORD }}" "${{ secrets.POSTGRES_USER }}" "${{ secrets.POSTGRES_PASSWORD }}"
          
      #     echo "Applying Langfuse ingress..."
      #     kubectl apply -f "../kubernetes/ingress/langfuse-ingress.yaml"
          
      #     echo "Langfuse deployment completed"

      - name: Provision Grafana alerting (AFTER datasources)
        run: |
          cd devops/helm-tools/grafana
          chmod +x provision-alerting.sh
          ./provision-alerting.sh

      - name: Restart logging stack pods (optional)
        run: |
          set -e
          kubectl rollout restart deployment grafana -n devops-logs || true
          kubectl rollout restart statefulset loki-stack -n devops-logs || true
          kubectl rollout restart daemonset loki-stack-promtail -n devops-logs || true