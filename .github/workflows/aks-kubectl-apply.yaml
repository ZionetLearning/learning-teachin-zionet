name: AKS - Platform Setup (Ingress/Dapr/Monitoring)

run-name: >
  ⚙️ AKS Platform Setup | Environment: ${{ 
    inputs.environment_name || github.event.inputs.environment_name 
  }} | GitHub Env: ${{ inputs.environment || github.event.inputs.environment }}

on:

  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment (GitHub Environment)'
        required: true
        default: 'Development'
        type: choice
        options: [Development, Production]
      environment_name:
        description: 'Optional namespace/prefix (lowercase letters & digits). Empty -> dev'
        required: false
        default: ''
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      environment_name:
        required: false
        type: string
      POSTGRES_PRIVATE_FQDN:
        required: true
        type: string  
    outputs:
      ingress_url:
        description: "http://<ingress external IP>"
        value: ${{ jobs.platform.outputs.ingress_url }}

jobs:
  platform:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up variables
        run: |

          ENVIRONMENT_NAME="${{ inputs.environment_name || github.event.inputs.environment_name }}"
          if [ -n "$ENVIRONMENT_NAME" ]; then
            [[ "$ENVIRONMENT_NAME" =~ ^[a-z0-9]+$ ]] || { echo "environment_name must be ^[a-z0-9]+$"; exit 1; }
            TARGET_NAMESPACE="$ENVIRONMENT_NAME"
            RESOLVED_TARGET="custom($ENVIRONMENT_NAME)"
            echo "TARGET_NAMESPACE=$TARGET_NAMESPACE" >> $GITHUB_ENV
            echo "RESOLVED_TARGET=$RESOLVED_TARGET" >> $GITHUB_ENV
          else
            TARGET_NAMESPACE="dev"
            RESOLVED_TARGET="dev"
            echo "TARGET_NAMESPACE=$TARGET_NAMESPACE" >> $GITHUB_ENV
            echo "RESOLVED_TARGET=$RESOLVED_TARGET" >> $GITHUB_ENV
          fi
          echo TARGET_NAMESPACE=$TARGET_NAMESPACE
          echo RESOLVED_TARGET=$RESOLVED_TARGET

          echo "K8S_DIR=devops/kubernetes/" >> $GITHUB_ENV
          echo "CHART_DIR=devops/kubernetes/charts" >> $GITHUB_ENV
          
          if [ "$TARGET_NAMESPACE" = "network" ]; then
              main_val=network
          else
              main_val=dev
          fi

          
          echo "MAIN_VAL=$main_val" >> $GITHUB_ENV 

          #---------------- AKS ------------------------
          echo "AKS_RG=${main_val}-zionet-learning-2025" >> $GITHUB_ENV
          echo "AKS_NAME=aks-cluster-${main_val}" >> $GITHUB_ENV
          echo "MC_AKS_RG=MC_${main_val}-zionet-learning-2025_aks-cluster-${main_val}_westeurope" >> $GITHUB_ENV

      - name: Get AKS credentials
        run: az aks get-credentials --resource-group $AKS_RG --name $AKS_NAME --overwrite-existing

      - name: Install/Upgrade Dapr control plane
        run: |
          cd devops/helm-tools
          chmod +x dapr-control-plane.sh
          ./dapr-control-plane.sh

      - name: Add postgres-proxy
        if: ${{ inputs.POSTGRES_PRIVATE_FQDN != '' }}
        run: |
          cd devops/helm-tools
          chmod +x postgres-proxy.sh
          ./postgres-proxy.sh
        env:
          POSTGRES_PRIVATE_FQDN: ${{ inputs.POSTGRES_PRIVATE_FQDN }}

      - name: Setup ingress controller
        run: |
          cd devops/helm-tools
          chmod +x setup-ingress-controller.sh
          ./setup-ingress-controller.sh "${{ env.MAIN_VAL }}"

      - name: Add Grafana
        if: false
        run: |
          cd devops/helm-tools
          chmod +x grafana.sh
          ./grafana.sh
      
      ###### This is one time only!! Never use unless the whole RG is wiped out
      # - name: Setup HTTPS certificates
      #   run: |
      #     cd devops/helm-tools
      #     chmod +x setup-https.sh
      #     ./setup-https.sh

      - name: Apply Grafana ingress (only)
        if: false
        run: kubectl apply -f "$K8S_DIR/ingress/grafana-ingress.yaml"

      - name: Add Prometheus
        if: false
        run: |
          cd devops/helm-tools/prometheus
          chmod +x prometheus.sh
          ./prometheus.sh

      - name: Add Loki (logs stack)
        if: false
        run: |
          cd devops/helm-tools/loki
          chmod +x loki.sh
          ./loki.sh
    
      - name: Configure Azure Monitor datasource in Grafana
        if: false 
        run: |
          cd devops/helm-tools/azure-monitor
          chmod +x azure-monitor.sh
          ./azure-monitor.sh
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_APPLICATION_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Restart logging stack pods (optional)
        if: false
        run: |
          set -e
          kubectl rollout restart deployment grafana -n devops-logs || true
          kubectl rollout restart statefulset loki-stack -n devops-logs || true
          kubectl rollout restart daemonset loki-stack-promtail -n devops-logs || true