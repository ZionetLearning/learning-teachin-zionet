name: Integration Tests

on:
  workflow_dispatch:
    inputs:
      api_stage:
        description: "Suffix for ApiBaseUrl (test|featest)"
        required: false
        default: test
        type: choice
        options: [test, featest]
      tests:
        description: "Optional: test names (comma/newline separated). e.g. Test1,Namespace.Test2,Class.Test3"
        required: false
        default: ""

  workflow_call:
    inputs:
      api_stage:
        description: "Suffix for ApiBaseUrl"
        required: false
        type: string
        default: test
      tests:
        description: "Optional: test names (comma/newline separated)"
        required: false
        type: string
        default: ""

jobs:
  integration-tests:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/IntegrationTest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore IntegrationTests.csproj

      - name: Ensure jq is installed
        run: |
          if ! command -v jq &> /dev/null
          then
            echo "jq not found, installing..."
            sudo apt-get update
            sudo apt-get install -y jq
          else
            echo "jq already installed"
          fi

      - name: Update ApiBaseUrl in appsettings.json
        run: |
          jq --arg url "https://teachin.westeurope.cloudapp.azure.com/api/${{ inputs.api_stage }}/" \
            '.TestSettings.ApiBaseUrl = $url' appsettings.json > tmp.json && mv tmp.json appsettings.json

      - name: Build test filter from names
        id: build-filter
        run: |
          NAMES="${{ inputs.tests }}"
          # Normalize separators: newlines/semicolons/spaces -> commas
          NAMES=$(printf '%s' "$NAMES" | tr '\n;' ',' | sed 's/[[:space:]]\+/,/g' | sed 's/,,*/,/g' | sed 's/^,\|,$//g')
          FILTER=""
          IFS=',' read -ra arr <<< "$NAMES"
          for name in "${arr[@]}"; do
            n=$(echo "$name" | xargs)  # trim
            [ -z "$n" ] && continue
            # Match either FQN (class.method or namespace.class.method) OR DisplayName
            expr="(FullyQualifiedName~$n|DisplayName~$n)"
            if [ -z "$FILTER" ]; then FILTER="$expr"; else FILTER="$FILTER|$expr"; fi
          done
          echo "filter=$FILTER" >> "$GITHUB_OUTPUT"

      - name: Run integration tests
        run: |
          if [ -n "${{ steps.build-filter.outputs.filter }}" ]; then
            echo "Running only tests matching filter: ${{ steps.build-filter.outputs.filter }}"
            dotnet test IntegrationTests.csproj --verbosity normal --filter "${{ steps.build-filter.outputs.filter }}"
          else
            echo "Running all tests"
            dotnet test IntegrationTests.csproj --verbosity normal
          fi


  #this needs to run even if the tests fail
  # clear-db:
  #       needs: integration-tests
  #       if: ${{ always() }} 
  #       uses: ./.github/workflows/clear-postgres.yml
  #       permissions:
  #         id-token: write
  #         contents: read
  #       with:
  #         mode: 'truncate'
  #         pg_database: 'appdb-${{ inputs.api_stage }}'
  #         dry_run: 'false'
  #         verify_ssl: 'true'
  #       secrets:
  #         POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  #         POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  #         AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  #         AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  #         AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}