name: Full CICD

run-name: >
  ðŸ”„ Full CICD | Environment: ${{ 
    github.event.inputs.environment_name || 'custom' 
  }} | GitHub Env: ${{ github.event.inputs.environment }}

on:
  # push:
  #  branches:
  #    - main
    workflow_dispatch:
      inputs:
        environment:
          description: 'Select environment (GitHub Environment)'
          required: true
          default: 'Development'
          type: choice
          options: [Development, Production]
        environment_name:
          description: 'Enter custom prefix (lowercase letters & digits only). This will be used as the Kubernetes namespace and environment identifier.'
          required: true
          type: string
        list_services_names:
          description: 'Optional comma-separated list of services to build (e.g., accessor,manager). Leave empty for all.'
          required: false
          type: string
          default: ''
        frontend_apps:
          description: 'Select frontend deployment option'
          required: false
          type: choice
          default: 'all'
          options: 
            - 'all'
            - 'none'
        unlock_featest:
          description: 'Set to true to only unlock featest environment (skips deployment)'
          required: false
          default: false
          type: boolean
          
jobs:

  lock-featest:
    if: ${{ (github.event.inputs.environment_name) == 'featest' }}
    permissions:
      contents: read
      issues: write
    uses: ./.github/workflows/lock-environment.yaml
    with:
      action: ${{ (github.event.inputs.unlock_featest == 'true') && 'unlock' || 'lock' }}

  build-and-push-images:
    needs: [lock-featest]
    if: |
      (needs.lock-featest.result == 'success' || needs.lock-featest.result == 'skipped') &&
      (github.event.inputs.unlock_featest != 'true')
    uses: ./.github/workflows/build-and-push-images.yaml
    permissions:
      id-token: write
      contents: read
      issues: write
    with:
      environment: ${{ github.event.inputs.environment }}
      environment_name: ${{ github.event.inputs.environment_name }}
      list_services_names: ${{ github.event.inputs.list_services_names }}
    secrets: inherit
 
  terraform-apply:
    needs: [lock-featest]
    if: |
      (needs.lock-featest.result == 'success' || needs.lock-featest.result == 'skipped') &&
      (github.event.inputs.unlock_featest != 'true')
    uses: ./.github/workflows/terraform-apply.yaml
    permissions:
      id-token: write
      contents: read
      issues: write
    with:
      environment_name: ${{ github.event.inputs.environment_name }}
      environment: ${{ github.event.inputs.environment }}
      frontend_apps: ${{ github.event.inputs.frontend_apps }}
    secrets: inherit
 
  aks-kubectl-apply:
    if: ${{ github.event.inputs.environment_name == 'dev' || github.event.inputs.environment_name == 'prod' }}
    needs: [build-and-push-images, terraform-apply]
    uses: ./.github/workflows/aks-kubectl-apply.yaml
    permissions:
      id-token: write
      contents: read
    with:
      environment_name: ${{ github.event.inputs.environment_name }}
      environment: ${{ github.event.inputs.environment }}
    secrets: inherit
   
  helmcharts-setup:
    needs: [build-and-push-images, terraform-apply, aks-kubectl-apply]
    if: |
      always() && 
      contains(fromJson('["success","skipped"]'), needs.aks-kubectl-apply.result) &&
      (needs.terraform-apply.result == 'success')
    uses: ./.github/workflows/aks-helmcharts.yaml
    permissions:
      id-token: write
      contents: read
      issues: write
    with:
      environment_name: ${{ github.event.inputs.environment_name }}
      environment: ${{ github.event.inputs.environment }}
      image_tag: ${{ needs.build-and-push-images.outputs.image_tag }}
      skip_infra_steps: false
    secrets: inherit
 
  deploy-frontend:
    if: ${{ github.event.inputs.environment_name == 'dev' || github.event.inputs.frontend_apps == 'all' }}
    needs: [terraform-apply]
    uses: ./.github/workflows/deploy-frontend.yaml
    permissions:
      id-token: write
      contents: read
    with:
      environment: ${{ github.event.inputs.environment }}
      environment_name: ${{ github.event.inputs.environment_name }}
      deployment_token: ${{ needs.terraform-apply.outputs.static_web_app_api_keys }}
      app_insights_connection_string: ${{ needs.terraform-apply.outputs.application_insights_connection_strings }}
    secrets: inherit
 
 