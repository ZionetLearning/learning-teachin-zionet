name: Deploy Frontend Apps to Azure Static Web Apps
run-name: >
  🚀 Deploy Frontend Apps (student, teacher, admin) to environment: ${{
    inputs.environment_name || github.event.inputs.environment_name || 'dev'
  }} | GitHub Environment: ${{ inputs.environment || github.event.inputs.environment || 'Development'}}
   
permissions:
   contents: read

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
    paths:
      - 'frontend/**'
  push:
    branches: [main]
    paths: ['frontend/**']    
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment (GitHub Environment)'
        required: true
        default: 'Development'
        type: choice
        options: [Development, Production]
      environment_name:
        description: 'lowercase letters & digits only (env identifier) where the application is deployed'
        required: true
        type: string
      run_only_tests:
        description: 'Run only frontend tests'
        required: false
        default: true
        type: boolean
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      environment_name:
        required: true
        type: string
      app_insights_connection_string:
        required: false
        type: string
      deployment_token:
        required: false
        type: string
      run_only_tests:
        required: false
        type: boolean
        default: false
    secrets:
      AZURE_STATIC_WEB_APPS_API_TOKEN:
        required: false

concurrency:
  group: deploy-frontend-apps-${{ inputs.environment_name || github.event.inputs.environment_name || 'dev' }}
  cancel-in-progress: false

env:
  # Azure Speech SDK configuration
  VITE_AZURE_SPEECH_KEY: ${{ secrets.VITE_AZURE_SPEECH_KEY }}
  VITE_AZURE_REGION: "eastus"
  
  # External APIs
  VITE_OPENWEATHERMAP_API_KEY: ${{ secrets.VITE_OPENWEATHERMAP_API_KEY }}
  
  # Backend microservices URLs
  VITE_BASE_URL: "https://teachin.westeurope.cloudapp.azure.com/api/dev"
  VITE_AI_URL: "https://teachin.westeurope.cloudapp.azure.com/api/dev/ai-manager"
  VITE_AUTH_URL: "https://teachin.westeurope.cloudapp.azure.com/api/dev/auth"
  VITE_TASKS_URL: "https://teachin.westeurope.cloudapp.azure.com/api/dev/tasks-manager"
  VITE_USERS_URL: "https://teachin.westeurope.cloudapp.azure.com/api/dev/users-manager"
  VITE_MEDIA_URL: "https://teachin.westeurope.cloudapp.azure.com/api/dev/media-manager"
  
  # Azure OpenAI configuration
  VITE_AZURE_OPENAI_KEY: ""
  VITE_AZURE_OPENAI_DEPLOYMENT_NAME: "gpt-4.1-mini"
  VITE_AZURE_OPENAI_API_VERSION: "2024-04-01-preview"
  VITE_AZURE_OPENAI_ENDPOINT: "https://france-teachin-open-ai.openai.azure.com/"
  
  # Monitoring and tracking
  VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

jobs:

  frontend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [student, teacher, admin]
    env:
      FE_DIR: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '${{ env.FE_DIR }}/package-lock.json'

      - name: Install Dependencies
        working-directory: ${{ env.FE_DIR }}
        run: npm ci

      - name: Run Tests for ${{ matrix.app }}
        working-directory: ${{ env.FE_DIR }}
        run: |
          echo "Running tests for ${{ matrix.app }}..."
          npx vitest run --reporter=verbose --passWithNoTests --root apps/${{ matrix.app }}
          echo "Tests completed successfully for ${{ matrix.app }}"

      - name: Start Frontend Apps for Cypress Tests
        working-directory: ${{ env.FE_DIR }}
        run: |
          echo "Starting frontend apps for Cypress testing..."
          # Start the apps in background based on the matrix app
          # Set CI environment variables for better startup
          export CI=true
          export NODE_ENV=development
          
          case "${{ matrix.app }}" in
            "student")
              echo "Starting student, teacher, and admin apps for student Cypress tests..."
              echo "Starting student app on port 4000..."
              nohup npm run serve:student > student.log 2>&1 &
              STUDENT_PID=$!
              echo "Student PID: $STUDENT_PID"
              
              echo "Starting admin app on port 4002..."
              nohup npm run serve:admin > admin.log 2>&1 &
              ADMIN_PID=$!
              echo "Admin PID: $ADMIN_PID"
              
              echo "Starting teacher app on port 4001..."
              nohup npm run serve:teacher > teacher.log 2>&1 &
              TEACHER_PID=$!
              echo "Teacher PID: $TEACHER_PID"
              ;;
            "teacher")
              echo "Starting teacher and admin apps for teacher Cypress tests..."
              echo "Starting teacher app on port 4001..."
              nohup npm run serve:teacher > teacher.log 2>&1 &
              TEACHER_PID=$!
              echo "Teacher PID: $TEACHER_PID"
              
              echo "Starting admin app on port 4002..."
              nohup npm run serve:admin > admin.log 2>&1 &
              ADMIN_PID=$!
              echo "Admin PID: $ADMIN_PID"
              ;;
            "admin")
              echo "Starting admin app for admin Cypress tests..."
              echo "Starting admin app on port 4002..."
              nohup npm run serve:admin > admin.log 2>&1 &
              ADMIN_PID=$!
              echo "Admin PID: $ADMIN_PID"
              ;;
            *)
              echo "Starting default app for ${{ matrix.app }}..."
              nohup npm run serve:${{ matrix.app }} > ${{ matrix.app }}.log 2>&1 &
              APP_PID=$!
              echo "App PID: $APP_PID"
              ;;
          esac
          
          echo "Waiting for apps to start..."
          sleep 15
          
          # Show process status
          echo "Checking background processes:"
          ps aux | grep "npm run serve" || echo "No npm serve processes found"
          ps aux | grep "nx serve" || echo "No nx serve processes found"
          
          # Wait for apps to be ready with longer timeout for CI
          TIMEOUT=300  # 5 minutes for CI environment
          ELAPSED=0
          CHECK_INTERVAL=10
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            READY=false
            case "${{ matrix.app }}" in
              "student")
                # Check both student and admin apps
                STUDENT_READY=$(curl -f -s --connect-timeout 3 --max-time 5 http://localhost:4000/ >/dev/null 2>&1 && echo "true" || echo "false")
                ADMIN_READY=$(curl -f -s --connect-timeout 3 --max-time 5 http://localhost:4002/ >/dev/null 2>&1 && echo "true" || echo "false")
                echo "Student app (4000): $STUDENT_READY, Admin app (4002): $ADMIN_READY"
                if [ "$STUDENT_READY" = "true" ] && [ "$ADMIN_READY" = "true" ]; then
                  READY=true
                  echo "✅ Student and admin apps are ready!"
                fi
                ;;
              "teacher")
                # Check both teacher and admin apps
                TEACHER_READY=$(curl -f -s --connect-timeout 3 --max-time 5 http://localhost:4001/ >/dev/null 2>&1 && echo "true" || echo "false")
                ADMIN_READY=$(curl -f -s --connect-timeout 3 --max-time 5 http://localhost:4002/ >/dev/null 2>&1 && echo "true" || echo "false")
                echo "Teacher app (4001): $TEACHER_READY, Admin app (4002): $ADMIN_READY"
                if [ "$TEACHER_READY" = "true" ] && [ "$ADMIN_READY" = "true" ]; then
                  READY=true
                  echo "✅ Teacher and admin apps are ready!"
                fi
                ;;
              "admin")
                # Check only admin app
                ADMIN_READY=$(curl -f -s --connect-timeout 3 --max-time 5 http://localhost:4002/ >/dev/null 2>&1 && echo "true" || echo "false")
                echo "Admin app (4002): $ADMIN_READY"
                if [ "$ADMIN_READY" = "true" ]; then
                  READY=true
                  echo "✅ Admin app is ready!"
                fi
                ;;
              *)
                # Check default app
                DEFAULT_READY=$(curl -f -s --connect-timeout 3 --max-time 5 http://localhost:4000/ >/dev/null 2>&1 && echo "true" || echo "false")
                echo "Default app (4000): $DEFAULT_READY"
                if [ "$DEFAULT_READY" = "true" ]; then
                  READY=true
                  echo "✅ App is ready!"
                fi
                ;;
            esac
            
            if [ "$READY" = "true" ]; then
              break
            fi
            
            echo "⏳ Apps not ready yet, waiting... ($ELAPSED/$TIMEOUT seconds)"
            
            # Show some log output every 30 seconds to help with debugging
            if [ $((ELAPSED % 30)) -eq 0 ] && [ $ELAPSED -gt 0 ]; then
              echo "--- Checking recent logs ---"
              [ -f student.log ] && echo "Student (last 5 lines):" && tail -5 student.log
              [ -f teacher.log ] && echo "Teacher (last 5 lines):" && tail -5 teacher.log  
              [ -f admin.log ] && echo "Admin (last 5 lines):" && tail -5 admin.log
            fi
            
            sleep $CHECK_INTERVAL
            ELAPSED=$((ELAPSED + CHECK_INTERVAL))
          done
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "❌ Timeout waiting for apps to start after $TIMEOUT seconds"
            echo "=== Process Status ==="
            ps aux | grep -E "(npm|nx|node)" | grep -v grep || echo "No relevant processes found"
            echo "=== Port Status ==="
            netstat -tlpn 2>/dev/null | grep -E ":400[0-2]" || echo "No apps listening on ports 4000-4002"
            echo "=== Full Logs ==="
            [ -f student.log ] && echo "=== Student App Log ===" && cat student.log
            [ -f teacher.log ] && echo "=== Teacher App Log ===" && cat teacher.log
            [ -f admin.log ] && echo "=== Admin App Log ===" && cat admin.log
            echo "=== Environment Info ==="
            echo "Node version: $(node --version)"
            echo "NPM version: $(npm --version)"
            echo "Available memory: $(free -h | head -2)"
            exit 1
          fi
      
      - name: Run E2E Tests (Cypress) for ${{ matrix.app }}
        working-directory: ${{ env.FE_DIR }}
        run: |
          echo "Running Cypress for ${{ matrix.app }}..."
          if grep -q "\"cypress:${{ matrix.app }}\":" package.json; then
            # Determine which ports to check based on the app
            case "${{ matrix.app }}" in
              "student")
                MAIN_PORT=4000
                ADMIN_PORT=4002
                echo "Checking if student app is available on localhost:$MAIN_PORT and admin app on localhost:$ADMIN_PORT..."
                ;;
              "teacher")
                MAIN_PORT=4001
                ADMIN_PORT=4002
                echo "Checking if teacher app is available on localhost:$MAIN_PORT and admin app on localhost:$ADMIN_PORT..."
                ;;
              "admin")
                MAIN_PORT=4002
                ADMIN_PORT=4002
                echo "Checking if admin app is available on localhost:$MAIN_PORT..."
                ;;
              *)
                MAIN_PORT=4000
                ADMIN_PORT=4002
                echo "Checking if app is available on localhost:$MAIN_PORT..."
                ;;
            esac
            
            # Check main app availability
            if curl -f -s --connect-timeout 5 http://localhost:$MAIN_PORT/ >/dev/null 2>&1; then
              # Check admin app availability if different from main app
              if [ "$MAIN_PORT" != "$ADMIN_PORT" ]; then
                if curl -f -s --connect-timeout 5 http://localhost:$ADMIN_PORT/ >/dev/null 2>&1; then
                  echo "Both main app (port $MAIN_PORT) and admin app (port $ADMIN_PORT) detected, running Cypress tests..."
                  npm run cypress:${{ matrix.app }}:ci
                  echo "Cypress run completed for ${{ matrix.app }}"
                else
                  echo "Main app available but admin app not available on localhost:$ADMIN_PORT - skipping Cypress tests"
                  echo "Cypress tests require both main app and admin app to be running for user management"
                fi
              else
                echo "App detected on port $MAIN_PORT, running Cypress tests..."
                npm run cypress:${{ matrix.app }}:ci
                echo "Cypress run completed for ${{ matrix.app }}"
              fi
            else
              echo "Main app not available on localhost:$MAIN_PORT - skipping Cypress tests"
              echo "To run Cypress tests, ensure the frontend apps are running on the correct ports"
            fi
          else
            echo "No cypress:${{ matrix.app }} script found in package.json - skipping"
          fi

      - name: Cleanup Frontend Apps
        if: always()
        working-directory: ${{ env.FE_DIR }}
        run: |
          echo "Cleaning up background processes..."
          # Kill any npm/node processes that might be running the serve commands
          pkill -f "npm run serve" || true
          pkill -f "nx serve" || true
          echo "Cleanup completed"


  frontend-build-and-lint:
    if: inputs.run_only_tests == false
    needs: [frontend-test]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'Development' }}
    env:
      FE_DIR: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '${{ env.FE_DIR }}/package-lock.json'

      - name: Install Dependencies
        working-directory: ${{ env.FE_DIR }}
        run: npm ci

      - name: Lint Code
        working-directory: ${{ env.FE_DIR }}
        run: npm run lint

      - name: Create release name for Sentry (UTC + short SHA)
        run: |
          ts=$(date -u "+Release-%d-%m-%Y_%H-%M")
          echo "RELEASE_NAME=${ts}-${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build All Applications (Parallel)
        working-directory: ${{ env.FE_DIR }}
        env:
          # Build-specific environment variables (RELEASE_NAME is created in the previous step)
          RELEASE: ${{ env.RELEASE_NAME }}
          VITE_APPINSIGHTS_CONNECTION_STRING_STUDENT: ${{ secrets.VITE_APPINSIGHTS_CONNECTION_STRING_STUDENT }}
          VITE_APPINSIGHTS_CONNECTION_STRING_TEACHER: ${{ secrets.VITE_APPINSIGHTS_CONNECTION_STRING_TEACHER }}
          VITE_APPINSIGHTS_CONNECTION_STRING_ADMIN:  ${{ secrets.VITE_APPINSIGHTS_CONNECTION_STRING_ADMIN  }}
        run: |
          echo "Starting parallel builds with per-app AI connection strings..."

          VITE_APPINSIGHTS_CONNECTION_STRING="$VITE_APPINSIGHTS_CONNECTION_STRING_STUDENT" npm run build:student &
          STUDENT_PID=$! && echo "Started student build (PID: $STUDENT_PID)"

          VITE_APPINSIGHTS_CONNECTION_STRING="$VITE_APPINSIGHTS_CONNECTION_STRING_TEACHER" npm run build:teacher &
          TEACHER_PID=$! && echo "Started teacher build (PID: $TEACHER_PID)"

          VITE_APPINSIGHTS_CONNECTION_STRING="$VITE_APPINSIGHTS_CONNECTION_STRING_ADMIN"  npm run build:admin   &
          ADMIN_PID=$!   && echo "Started admin build (PID: $ADMIN_PID)"

          echo "Waiting for all builds to complete..."
          wait $STUDENT_PID && echo "Student build completed"
          wait $TEACHER_PID && echo "Teacher build completed"
          wait $ADMIN_PID   && echo "Admin build completed"

          echo "🚀 All frontend applications built successfully with per-app AI!"

      - name: Normalize build outputs to frontend/dist/apps/*
        working-directory: ${{ env.FE_DIR }}
        run: |
          set -e
          mkdir -p dist/apps/student dist/apps/teacher dist/apps/admin
          if [ -d apps/student/dist ]; then rsync -a --delete apps/student/dist/ dist/apps/student/; fi
          if [ -d apps/teacher/dist ]; then rsync -a --delete apps/teacher/dist/ dist/apps/teacher/; fi
          if [ -d apps/admin/dist ];  then rsync -a --delete apps/admin/dist/  dist/apps/admin/;  fi
          echo "== dist tree =="
          find dist -maxdepth 3 -type d -print

      - name: Verify AI is in bundles
        working-directory: ${{ env.FE_DIR }}
        run: |
          if ! grep -R "applicationinsights" -n dist/ >/dev/null 2>&1; then
            echo "AI SDK not found in built files."
            exit 1
          fi
          if ! grep -R "applicationinsights.azure.com" -n dist/ >/dev/null 2>&1; then
            echo "Ingestion endpoint not found (env missing?)."
            exit 1
          fi
          echo "AI present in bundles."

      - name: Upload build artifacts
        if: |
         github.event_name == 'push' ||
         github.event_name == 'workflow_dispatch' ||
         github.event_name == 'workflow_call'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.FE_DIR }}/dist/
          retention-days: 1

  deploy:
    if: |
     github.event_name == 'push' ||
     github.event_name == 'workflow_dispatch' ||
     github.event_name == 'workflow_call'
    needs: [frontend-build-and-lint]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'Development' }}
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        app: [student, teacher, admin]
    env:
      FE_DIR: frontend
    steps:
      - uses: actions/checkout@v4

      # If triggered by PR merge, set default environment_name to dev
      - name: Set default environment_name for PR merge
        if: ${{ github.event_name == 'push' }}
        run: |
          echo "environment_name=dev" >> $GITHUB_ENV

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Validate Static Web Apps deployment prerequisites
        shell: bash
        run: |
          ENV="${{ inputs.environment_name || env.environment_name}}"
          RG="${ENV}-zionet-learning-2025"
          
          # Check if resource group exists
          if ! az group show --name "$RG" &>/dev/null; then
            echo "Resource group $RG not found. Cannot proceed with deployment."
            exit 1
          fi
          
          # Check if any Static Web Apps exist in the resource group
          SWA_COUNT=$(az staticwebapp list --resource-group "$RG" --query "length(@)" -o tsv 2>/dev/null || echo "0")
          
          if [ "$SWA_COUNT" = "0" ]; then
            echo "No Static Web Apps found in resource group $RG."
            echo "This usually means frontend_apps is set to an empty array [] in Terraform."
            echo "Please either:"
            echo "  1. Set frontend_apps=[\"student\",\"teacher\",\"admin\"] in Terraform and run terraform apply, OR"
            echo "  2. Set frontend_apps to empty string in the workflow to skip this deployment"
            exit 1
          fi
          
          echo "Found $SWA_COUNT Static Web Apps in resource group $RG"

      - name: Compute resource names
        id: names
        shell: bash
        run: |
          set -euo pipefail
          ENV="${{ inputs.environment_name || env.environment_name}}"
          APP="${{ matrix.app }}"
          RG="${ENV}-zionet-learning-2025"
          
          # Get all Static Web Apps in the resource group
          STATIC_WEB_APPS=$(az staticwebapp list --resource-group "$RG" --query "[].{name:name, tags:tags}" -o json 2>/dev/null || echo '[]')
          
          if [ "$STATIC_WEB_APPS" = "[]" ]; then
            echo "No Static Web Apps found in resource group $RG"
            exit 1
          fi
          
          # Find the Static Web App for this specific app (student/teacher/admin)
          # Look for apps with Project:Frontend tag and Environment matching our env
          SWA_NAME=$(echo "$STATIC_WEB_APPS" | jq -r --arg app "$APP" --arg env "$ENV" '
            .[] | select(
              (.tags.Project // "") == "Frontend" and 
              (.tags.Environment // "") == $env and
              (.name | test($app; "i"))
            ) | .name' | head -1)
          
          # If no tagged app found, try to find by name pattern
          if [ -z "$SWA_NAME" ] || [ "$SWA_NAME" = "null" ]; then
            SWA_NAME=$(echo "$STATIC_WEB_APPS" | jq -r --arg app "$APP" '
              .[] | select(.name | test($app; "i")) | .name' | head -1)
          fi
          
          # If still no app found, list what's available and fail
          if [ -z "$SWA_NAME" ] || [ "$SWA_NAME" = "null" ]; then
            echo "No Static Web App found for app: $APP"
            echo "$STATIC_WEB_APPS" | jq -r '.[] | "Available: \(.name)"'
            exit 1
          fi
          
          echo "Deploying $APP to: $SWA_NAME"
          
          AI_NAME="${SWA_NAME}-appinsights"
          echo "rg=$RG" >> $GITHUB_OUTPUT
          echo "swa=$SWA_NAME" >> $GITHUB_OUTPUT
          echo "ai=$AI_NAME" >> $GITHUB_OUTPUT
       
      - name: Clean stage environment
        shell: bash
        run: |
          set -euo pipefail 

          # Get all staging environments for this Static Web App
          ENVIRONMENTS=$(az staticwebapp environment list \
            --name "${{ steps.names.outputs.swa }}" \
            --resource-group "${{ steps.names.outputs.rg }}" \
            --query "[?name != 'default'].{name:name, createdOn:createdOn}" \
            --output json)

          # Delete all staging environments
          for env in $(echo "$ENVIRONMENTS" | jq -r '.[].name'); do
            echo "Deleting staging environment: $env"
            az staticwebapp environment delete \
              --name "${{ steps.names.outputs.swa }}" \
              --resource-group "${{ steps.names.outputs.rg }}" \
              --environment-name "$env" \
              --yes || true
          done



      - name: Get App Insights connection string
        id: ai
        shell: bash
        run: |
          if [ -n "${{ inputs.app_insights_connection_string || '' }}" ]; then
            echo "Using provided App Insights connection strings from terraform output..."
            # Extract the connection string for the current app from the JSON object
            CONN=$(echo '${{ inputs.app_insights_connection_string }}' | jq -r '."${{ matrix.app }}"')
            if [ "$CONN" = "null" ] || [ -z "$CONN" ]; then
              echo "No App Insights connection string found for app: ${{ matrix.app }}"
              exit 1
            fi
            echo "::add-mask::$CONN"
            echo "APPINSIGHTS_CONNECTION_STRING=$CONN" >> "$GITHUB_ENV"
          else
            echo "Fetching App Insights connection string from Azure CLI..."
            set -euo pipefail
            CONN=$(az resource show \
              -g "${{ steps.names.outputs.rg }}" \
              -n "${{ steps.names.outputs.ai }}" \
              --resource-type "Microsoft.Insights/components" \
              --query "properties.ConnectionString" -o tsv)
            if [ -z "$CONN" ]; then
              echo "Could not resolve Application Insights connection string."
              exit 1
            fi
            echo "::add-mask::$CONN"
            echo "APPINSIGHTS_CONNECTION_STRING=$CONN" >> "$GITHUB_ENV"
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.FE_DIR }}/dist/

      - name: Get SWA deployment token
        id: swatoken
        shell: bash
        run: |
          if [ -n "${{ inputs.deployment_token || '' }}" ]; then
            # Extract the token for the current app from the JSON object
            TOKEN=$(echo '${{ inputs.deployment_token }}' | jq -r '."${{ matrix.app }}"')
            if [ "$TOKEN" = "null" ] || [ -z "$TOKEN" ]; then
              echo "No deployment token found for app: ${{ matrix.app }}"
              exit 1
            fi
            echo "::add-mask::$TOKEN"
            echo "AZURE_STATIC_WEB_APPS_API_TOKEN=$TOKEN" >> "$GITHUB_ENV"
          else
            set -euo pipefail
            TOKEN=$(az staticwebapp secrets list \
              --name "${{ steps.names.outputs.swa }}" \
              --resource-group "${{ steps.names.outputs.rg }}" \
              --query "properties.apiKey" -o tsv)
            if [ -z "$TOKEN" ]; then
              echo "Could not fetch Static Web Apps deployment token."
              exit 1
            fi
            echo "::add-mask::$TOKEN"
            echo "AZURE_STATIC_WEB_APPS_API_TOKEN=$TOKEN" >> "$GITHUB_ENV"
          fi

      - name: Deploy to Azure Static Web Apps (Production slot)
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "upload"
          app_location: "${{ env.FE_DIR }}/dist/apps/${{ matrix.app }}"
          api_location: "" # No API
          output_location: "" # Files are already built
          skip_app_build: true
          skip_api_build: true