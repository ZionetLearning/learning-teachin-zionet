name: AKS - Update Pod Containers

run-name: >
  üö¢ Helm Deploy | Environment: ${{ 
    inputs.environment_name || github.event.inputs.environment_name || 'dev'
  }} | GitHub Env: ${{ inputs.environment || github.event.inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment (GitHub Environment)'
        required: true
        default: 'Development'
        type: choice
        options: [Development, Production]
      environment_name:
        description: 'Optional namespace/prefix (lowercase letters & digits). Empty -> dev'
        required: false
        default: ''
      image_tag:
        description: 'Optional image tag (e.g., commit hash). Empty -> uses environment_name'
        required: false
        default: ''

  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      environment_name:
        required: false
        type: string
      image_tag:
        required: false
        type: string
        description: 'Docker image tag to deploy (e.g., commit hash)'
      skip_infra_steps:
        required: false
        type: boolean
        default: false
    outputs:
      app_url:
        description: "Ingress URL (if already created by platform setup)"
        value: ${{ jobs.deploy.outputs.app_url }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read

    outputs:
      app_url: ${{ steps.extract_url.outputs.app_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up variables
        id: setup
        run: |
          ENVIRONMENT_NAME="${{ inputs.environment_name || github.event.inputs.environment_name }}"
          
          if [ -n "$ENVIRONMENT_NAME" ]; then
            [[ "$ENVIRONMENT_NAME" =~ ^[a-z0-9]+$ ]] || { echo "environment_name must be ^[a-z0-9]+$"; exit 1; }
            TARGET_NAMESPACE="$ENVIRONMENT_NAME"
            RESOLVED_TARGET="custom($ENVIRONMENT_NAME)"
            echo "TARGET_NAMESPACE=$TARGET_NAMESPACE" >> $GITHUB_ENV
            echo "RESOLVED_TARGET=$RESOLVED_TARGET" >> $GITHUB_ENV
          else
            TARGET_NAMESPACE="dev"
            RESOLVED_TARGET="dev"
            echo "TARGET_NAMESPACE=$TARGET_NAMESPACE" >> $GITHUB_ENV
            echo "RESOLVED_TARGET=$RESOLVED_TARGET" >> $GITHUB_ENV
          fi

          echo "TARGET_NAMESPACE=$TARGET_NAMESPACE"
          echo "RESOLVED_TARGET=$RESOLVED_TARGET"

          echo "K8S_DIR=devops/kubernetes/" >> $GITHUB_ENV
          echo "CHART_DIR=devops/kubernetes/charts" >> $GITHUB_ENV
          
          #--------------- docker registry ---------------
          # echo "ACR_NAME=teachindevacr" >> $GITHUB_ENV
          # echo "ACR_LOGIN_SERVER=teachindevacr.azurecr.io" >> $GITHUB_ENV
          echo "DOCKER_REGISTRY=${{ secrets.DOCKERHUB_USERNAME }}" >> $GITHUB_ENV
  


          
   
          if [ "$TARGET_NAMESPACE" = "network" ]; then
              main_val=network
          else
              main_val=dev
          fi

          echo "VALUES_FILE=devops/kubernetes/charts/values.${main_val}.yaml" >> $GITHUB_ENV
          #--------------- Shared AKS ---------------
          echo "AKS_RG=${main_val}-zionet-learning-2025" >> $GITHUB_ENV
          echo "AKS_NAME=aks-cluster-${main_val}" >> $GITHUB_ENV
          
          # Determine if infrastructure steps should be skipped
          # Skip for: push events (auto PR merge) OR manual dispatch (no skip_infra_steps input) OR when skip_infra_steps=true
          # Run for: CI/CD workflows (when skip_infra_steps is explicitly false)
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Push event detected, skipping infrastructure"
            echo "skip_infra_steps=true" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.skip_infra_steps }}" = "" ]; then
            echo "Manual dispatch - no skip_infra_steps input, skipping infrastructure"
            echo "skip_infra_steps=true" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.skip_infra_steps }}" = "true" ]; then
            echo "skip_infra_steps=true passed, skipping infrastructure"
            echo "skip_infra_steps=true" >> $GITHUB_OUTPUT
          else
            echo "skip_infra_steps=false passed, running infrastructure"
            echo "skip_infra_steps=false" >> $GITHUB_OUTPUT
          fi

          # Redis (shared)
          case "$ENVIRONMENT_NAME" in
            dev)
              echo "REDIS_DATABASE_INDEX=0" >> $GITHUB_ENV
              ;;
            prod)
              echo "REDIS_DATABASE_INDEX=1" >> $GITHUB_ENV
              ;;
            test)
              echo "REDIS_DATABASE_INDEX=2" >> $GITHUB_ENV
              ;;
            featest)
              echo "REDIS_DATABASE_INDEX=3" >> $GITHUB_ENV
              ;;
            featest2)
              echo "REDIS_DATABASE_INDEX=4" >> $GITHUB_ENV
              ;;
            *)
              echo "REDIS_DATABASE_INDEX=5" >> $GITHUB_ENV
              echo "ENVIRONMENT_NAME is $ENVIRONMENT_NAME"
              ;;
          esac


      - name: Get AKS credentials
        run: az aks get-credentials --resource-group $AKS_RG --name $AKS_NAME --overwrite-existing

      - name: Create namespace
        if: ${{ steps.setup.outputs.skip_infra_steps == 'false' }}
        run: |
          kubectl create namespace "$TARGET_NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -

      - name: Check and fix Helm release status
        run: |
          echo "Checking Helm release status for namespace: $TARGET_NAMESPACE"
          RELEASE_STATUS=$(helm status app -n "$TARGET_NAMESPACE" -o json 2>/dev/null | jq -r '.info.status' || echo "not-found")
          echo "Current release status: $RELEASE_STATUS"

          if [[ "$RELEASE_STATUS" == "pending-install" ]] || [[ "$RELEASE_STATUS" == "pending-upgrade" ]] || [[ "$RELEASE_STATUS" == "pending-rollback" ]]; then
            echo "Found pending operation. Attempting rollback..."
            helm rollback app -n "$TARGET_NAMESPACE" || echo "Rollback failed, trying to delete release history..."
            helm delete app -n "$TARGET_NAMESPACE" --wait || echo "Delete failed, continuing anyway..."
            sleep 5
          fi

          echo "Helm release status check complete."

      - name: Wait for external IP for ingress controller
        run: |
          echo "Waiting for external IP for ingress-nginx-controller..."
          for i in {1..30}; do
            INGRESS_IP=$(kubectl -n devops-ingress-nginx get svc ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$INGRESS_IP" ]]; then
              echo "Ingress IP is ready: $INGRESS_IP"
              echo "ingress_url=http://$INGRESS_IP" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "Attempt $i: not ready. Sleeping 10s..."
            sleep 10
          done
          echo "Failed to get ingress IP."; exit 1


      
      - name: Install External Secrets Operator (with CRDs)
        if: ${{ steps.setup.outputs.skip_infra_steps == 'false' }}
        run: |
          helm repo add external-secrets https://charts.external-secrets.io
          helm repo update
          helm upgrade --install external-secrets external-secrets/external-secrets \
            --namespace external-secrets \
            --create-namespace \
            --set installCRDs=true \
            --wait --timeout 180s

      - name: Wait for External Secrets CRD
        if: ${{ steps.setup.outputs.skip_infra_steps == 'false' }}
        run: |
          echo "‚è≥ Waiting for ExternalSecrets CRD..."
          for i in {1..40}; do
            if kubectl get crd externalsecrets.external-secrets.io &>/dev/null; then
              echo "‚úÖ ExternalSecrets CRD is present"
              # Optionally, check if the API is available
              if kubectl api-resources | grep -q "^externalsecrets "; then
                echo "‚úÖ ExternalSecrets API ready"
                exit 0
              fi
            fi
            echo "Waiting for CRD and API..."
            sleep 5
          done
          echo "‚ùå Timeout waiting for ExternalSecrets CRD/API"
          exit 1

      - name: Helm template sanity (no Namespace objects)
        run: |
          # Use image_tag if provided, otherwise fall back to TARGET_NAMESPACE
          IMAGE_TAG="${{ inputs.image_tag || github.event.inputs.image_tag }}"
          if [ -z "$IMAGE_TAG" ]; then
            IMAGE_TAG="$TARGET_NAMESPACE"
          fi
          
          helm template app "$CHART_DIR" -f "$VALUES_FILE" \
            --set namespace.name="$TARGET_NAMESPACE" \
            --set namespace.create=false \
            --set global.namePrefix="$TARGET_NAMESPACE" \
            --set global.dockerRegistry="$DOCKER_REGISTRY" \
            --set global.environment="$IMAGE_TAG" \
            --set global.keyvault.clientId="$KEYVAULT_CLIENT_ID" \
            --set global.keyvault.tenantId="$KEYVAULT_TENANT_ID" \
            --set dapr.installComponents=false \
          | grep -n '^kind: Namespace' && { echo "Namespace still rendered"; exit 1; } || echo "OK: no Namespace in chart"

      - name: Helm upgrade/install app
        run: |
          # Use image_tag if provided, otherwise fall back to TARGET_NAMESPACE
          IMAGE_TAG="${{ inputs.image_tag || github.event.inputs.image_tag }}"
          if [ -z "$IMAGE_TAG" ]; then
            IMAGE_TAG="$TARGET_NAMESPACE"
          fi
          
          helm upgrade --install app "$CHART_DIR" \
            --namespace "$TARGET_NAMESPACE" \
            -f "$VALUES_FILE" \
            --set namespace.name="$TARGET_NAMESPACE" \
            --set namespace.create=false \
            --set global.namePrefix="$TARGET_NAMESPACE" \
            --set global.dockerRegistry="$DOCKER_REGISTRY" \
            --set global.environment="$IMAGE_TAG" \
            --set global.keyvault.clientId="$KEYVAULT_CLIENT_ID" \
            --set global.keyvault.tenantId="$KEYVAULT_TENANT_ID" \
            --set dapr.stateStore.redis.redisDB=$REDIS_DATABASE_INDEX \
            --set dapr.installComponents=false 

      - name: Diagnostics (on failure)
        if: failure()
        run: |
          ns="$TARGET_NAMESPACE"
          kubectl -n "$ns" get all
          kubectl -n "$ns" get events --sort-by=.lastTimestamp | tail -n 200 || true
          for p in $(kubectl -n "$ns" get pods -o name); do
            echo "## $p"
            kubectl -n "$ns" describe "$p" || true
            kubectl -n "$ns" logs "$p" --all-containers --tail=200 || true
          done
