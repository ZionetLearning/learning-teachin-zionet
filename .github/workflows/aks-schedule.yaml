name: AKS - Scheduled Start/Stop

on:
  schedule:
  #   # 7:00 Israel time = 4:00 UTC (START: Sunday-Thursday)
    - cron: '0 4 * * 0-4'
  #   # 19:30 Israel time = 16:30 UTC (STOP: Sunday-Saturday)
    - cron: '30 16 * * 0-6'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'START'
        type: choice
        options:
          - START
          - STOP
      cluster:
        description: 'AKS cluster name (e.g., dev, podsstart)'
        required: true
        default: 'dev'
        type: string

jobs:
  scheduled-operation:
    runs-on: ubuntu-latest
    environment: Development
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Determine action based on schedule
        id: determine_action
        run: |
          # Check if this is a manual dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ACTION="${{ inputs.action }}"
            CLUSTER="${{ inputs.cluster }}"
            echo "Manual dispatch detected"
            echo "Action: $ACTION"
            echo "Cluster: $CLUSTER"
            echo "action=$ACTION" >> $GITHUB_OUTPUT
            echo "cluster=$CLUSTER" >> $GITHUB_OUTPUT
            echo "schedule_type=manual" >> $GITHUB_OUTPUT
          else
            # Get current time in Israel timezone
            ISRAEL_TIME=$(TZ='Asia/Jerusalem' date '+%Y-%m-%d %H:%M:%S %Z')
            ISRAEL_HOUR=$(TZ='Asia/Jerusalem' date '+%H')
            DAY_OF_WEEK=$(TZ='Asia/Jerusalem' date '+%u')  # 1=Monday, 7=Sunday
            DAY_NAME=$(TZ='Asia/Jerusalem' date '+%A')
            
            echo "Current Israel time: $ISRAEL_TIME"
            echo "Day of week: $DAY_OF_WEEK ($DAY_NAME)"
            
            # Automatic schedule - always use dev cluster
            echo "cluster=dev" >> $GITHUB_OUTPUT
            
            # Determine if this is morning or evening schedule based on hour
            if [[ $ISRAEL_HOUR -ge 3 && $ISRAEL_HOUR -le 12 ]]; then
              # Morning schedule (around 8:30 AM Israel time)
              echo "Morning schedule detected - START action"
              echo "action=START" >> $GITHUB_OUTPUT
              echo "schedule_type=morning" >> $GITHUB_OUTPUT
            elif [[ $ISRAEL_HOUR -ge 16 && $ISRAEL_HOUR -le 22 ]]; then
              # Evening schedule (around 7:30 PM Israel time)  
              echo "Evening schedule detected - STOP action"
              echo "action=STOP" >> $GITHUB_OUTPUT
              echo "schedule_type=evening" >> $GITHUB_OUTPUT
            else
              echo "Unknown schedule time - defaulting to manual trigger"
              echo "action=MANUAL" >> $GITHUB_OUTPUT
              echo "schedule_type=manual" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up variables
        run: |
          CLUSTER="${{ steps.determine_action.outputs.cluster }}"
          echo "Selected cluster: $CLUSTER"
          
          # Construct resource group and cluster name based on cluster input
          echo "AKS_RG=${CLUSTER}-zionet-learning-2025" >> $GITHUB_ENV
          echo "AKS_NAME=aks-cluster-${CLUSTER}" >> $GITHUB_ENV
          
          echo "Resource Group: ${CLUSTER}-zionet-learning-2025"
          echo "Cluster Name: aks-cluster-${CLUSTER}"

      - name: Check current cluster status
        run: |
          STATUS=$(az aks show --resource-group $AKS_RG --name $AKS_NAME --query "powerState.code" -o tsv)
          CLUSTER="${{ steps.determine_action.outputs.cluster }}"
          echo "Current AKS cluster status ($CLUSTER): $STATUS"
          
          ACTION="${{ steps.determine_action.outputs.action }}"
          
          if [[ "$ACTION" == "START" && "$STATUS" == "Running" ]]; then
            echo "‚ö†Ô∏è Cluster is already running"
          elif [[ "$ACTION" == "STOP" && "$STATUS" == "Stopped" ]]; then
            echo "‚ö†Ô∏è Cluster is already stopped"
          fi

      - name: Start AKS cluster
        if: steps.determine_action.outputs.action == 'START'
        run: |
          CLUSTER="${{ steps.determine_action.outputs.cluster }}"
          SCHEDULE_TYPE="${{ steps.determine_action.outputs.schedule_type }}"
          
          if [[ "$SCHEDULE_TYPE" == "manual" ]]; then
            echo "üöÄ Starting AKS cluster: $AKS_NAME ($CLUSTER - manual dispatch)"
          else
            echo "üöÄ Starting AKS cluster: $AKS_NAME ($CLUSTER - scheduled startup)"
          fi
          
          START_TIME=$(date +%s)
          az aks start --resource-group $AKS_RG --name $AKS_NAME
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "‚úÖ AKS cluster start completed in ${DURATION} seconds"

      - name: Stop AKS cluster
        if: steps.determine_action.outputs.action == 'STOP'
        run: |
          CLUSTER="${{ steps.determine_action.outputs.cluster }}"
          SCHEDULE_TYPE="${{ steps.determine_action.outputs.schedule_type }}"
          
          if [[ "$SCHEDULE_TYPE" == "manual" ]]; then
            echo "üõë Stopping AKS cluster: $AKS_NAME ($CLUSTER - manual dispatch)"
          else
            echo "üõë Stopping AKS cluster: $AKS_NAME ($CLUSTER - scheduled shutdown)"
          fi
          
          START_TIME=$(date +%s)
          az aks stop --resource-group $AKS_RG --name $AKS_NAME
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "‚úÖ AKS cluster stop completed in ${DURATION} seconds"

      - name: Wait for cluster to be ready (START only)
        if: steps.determine_action.outputs.action == 'START'
        run: |
          echo "‚è≥ Waiting for cluster to be fully ready..."
          WAIT_START=$(date +%s)
          for i in {1..30}; do
            STATUS=$(az aks show --resource-group $AKS_RG --name $AKS_NAME --query "powerState.code" -o tsv)
            if [[ "$STATUS" == "Running" ]]; then
              WAIT_END=$(date +%s)
              WAIT_DURATION=$((WAIT_END - WAIT_START))
              echo "‚úÖ Cluster is running and ready after ${WAIT_DURATION} seconds"
              break
            fi
            echo "Attempt $i: Cluster status is $STATUS, waiting 30s..."
            sleep 30
          done

      - name: Verify final status
        run: |
          FINAL_STATUS=$(az aks show --resource-group $AKS_RG --name $AKS_NAME --query "powerState.code" -o tsv)
          ACTION="${{ steps.determine_action.outputs.action }}"
          SCHEDULE_TYPE="${{ steps.determine_action.outputs.schedule_type }}"
          
          echo "üìã Schedule Summary:"
          echo "Schedule type: $SCHEDULE_TYPE"
          echo "Action performed: $ACTION"
          echo "Final cluster status: $FINAL_STATUS"
          
          if [[ "$ACTION" == "START" && "$FINAL_STATUS" == "Running" ]]; then
            echo "‚úÖ Morning startup successful - cluster ready for workday"
          elif [[ "$ACTION" == "STOP" && "$FINAL_STATUS" == "Stopped" ]]; then
            echo "‚úÖ Evening shutdown successful - saving costs overnight"
          elif [[ "$ACTION" == "MANUAL" ]]; then
            echo "‚ÑπÔ∏è Manual trigger - current status: $FINAL_STATUS"
          fi

      - name: Get AKS credentials
        if: steps.determine_action.outputs.action == 'START'
        run: |
          echo "üîó Getting AKS credentials for kubectl access..."
          az aks get-credentials --resource-group $AKS_RG --name $AKS_NAME --overwrite-existing

      - name: Wait for dapr-system to be ready
        if: steps.determine_action.outputs.action == 'START'
        run: |
          echo "Waiting for dapr-system pods..."
          kubectl wait --for=condition=Ready pod -n dapr-system --all --timeout=180s

      - name: Restart deployments in relevant namespaces
        if: steps.determine_action.outputs.action == 'START'
        run: |
          CLUSTER="${{ steps.determine_action.outputs.cluster }}"
          
          if [[ "$CLUSTER" == "dev" ]]; then
            # For dev cluster, restart dev, test and stage namespaces
            for ns in dev test stage; do
              echo "üîÑ Restarting deployments in namespace: $ns"
              kubectl rollout restart deployment -n $ns
              echo "‚úÖ Deployment restart initiated for $ns namespace"
            done
          else
            # For any other cluster, restart the cluster's own namespace
            echo "üîÑ Restarting deployments in namespace: $CLUSTER"
            kubectl rollout restart deployment -n $CLUSTER
            echo "‚úÖ Deployment restart initiated for $CLUSTER namespace"
          fi