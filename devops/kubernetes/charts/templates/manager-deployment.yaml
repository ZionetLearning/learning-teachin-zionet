apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.manager.name }}
  namespace: {{ include "app.namespace" . }}
  labels:
    {{ .Values.manager.labels.selectorKey }}: {{ .Values.manager.labels.selectorValue }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{ .Values.manager.labels.selectorKey }}: {{ .Values.manager.labels.selectorValue }}
  template:
    metadata:
      labels:
        {{ .Values.manager.labels.selectorKey }}: {{ .Values.manager.labels.selectorValue }}
      annotations:
        {{ include "app.dapr.annotations" (dict
            "enabled" .Values.global.dapr.enabled
            "appId" (.Values.manager.dapr.appId | default .Values.manager.name)
            "appPort" .Values.manager.dapr.appPort
            "config"  (.Values.global.dapr.configName | default "dapr-config")
        ) | nindent 8 }}
        dapr.io/sidecar-cpu-request:  "{{ .Values.global.dapr.sidecar.requests.cpu }}"
        dapr.io/sidecar-memory-request: "{{ .Values.global.dapr.sidecar.requests.memory }}"
        dapr.io/sidecar-cpu-limit:    "{{ .Values.global.dapr.sidecar.limits.cpu }}"
        dapr.io/sidecar-memory-limit: "{{ .Values.global.dapr.sidecar.limits.memory }}"
    spec:
      {{- if .Values.global.imagePullSecret.enabled }}
      serviceAccountName: {{ .Values.serviceAccount.name | default (printf "%s-serviceaccount" .Release.Namespace) }}
      imagePullSecrets:
        - name: {{ .Values.global.imagePullSecret.name }}
      {{- end }}
      # initContainers:
      #   - name: wait-for-accessor
      #     image: curlimages/curl:8.5.0
      #     command:
      #       - sh
      #       - -c
      #       - |
      #         until curl -s -o /dev/null -w "%{http_code}" http://{{ .Values.accessor.name }}:80/health | grep -E '^(200)$'; do
      #           echo "Waiting for accessor...";
      #           sleep 2;
      #         done
      containers:
        - name: {{ .Values.manager.name }}
          image: {{ include "app.image" (dict "name" .Values.manager.image.name "tag" .Values.manager.image.tag "Values" .Values) }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          ports:
            - containerPort: {{ .Values.manager.ports.container }}
              protocol: TCP
          env:
            - name: ASPNETCORE_URLS
              value: "{{ .Values.manager.env.ASPNETCORE_URLS }}"
            - name: ServiceBus__ConnectionString
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.manager.secrets.serviceBus.name }}
                  key: {{ .Values.manager.secrets.serviceBus.key }}
            - name: Jwt__Secret
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.manager.secrets.jwt.name }}
                  key: {{ .Values.manager.secrets.jwt.keys.secret }}
            - name: Jwt__Issuer
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.manager.secrets.jwt.name }}
                  key: {{ .Values.manager.secrets.jwt.keys.issuer }}
            - name: Jwt__Audience
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.manager.secrets.jwt.name }}
                  key: {{ .Values.manager.secrets.jwt.keys.audience }}
            - name: Jwt__RefreshTokenHashKey
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.manager.secrets.jwt.name }}
                  key: {{ .Values.manager.secrets.jwt.keys.refresh }}
            - name: SignalR__ConnectionString
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.manager.secrets.signalr.name }}
                  key: {{ .Values.manager.secrets.signalr.key }}
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.manager.ports.container }}
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.manager.ports.container }}
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: {{ .Values.manager.ports.container }}
            initialDelaySeconds: 5   # Start checking sooner
            periodSeconds: 2         # Check more frequently
            timeoutSeconds: 3
            failureThreshold: 30     # Allow up to 1 minute for startup (30 * 2s)
          resources:
            {{- toYaml .Values.manager.resources | nindent 12 }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.manager.name }}
  namespace: {{ include "app.namespace" . }}
spec:
  type: {{ .Values.manager.service.type }}
  selector:
    {{ .Values.manager.labels.selectorKey }}: {{ .Values.manager.labels.selectorValue }}
  ports:
    - port: {{ .Values.manager.ports.service }}
      targetPort: {{ .Values.manager.ports.container }}