global:
  namePrefix: ""
  dockerRegistry: ""
  imagePullPolicy: IfNotPresent
  environment: ""  # Environment name/tag (e.g., dev, devacr, prod) - set by CI/CD
  dapr:
    enabled: true
    configName: dapr-config
    sidecar:
      requests:
        cpu: "100m"
        memory: "128Mi"
      limits:
        cpu: "200m"
        memory: "256Mi"
  imagePullSecret:
    enabled: false
    name: ""
  keyvault:
    clientId: ""
    tenantId: ""
    storeName: "azure-keyvault-backend"

# If empty, namespace becomes <namePrefix>
namespace:
  create: true
  name: ""
cronjobs:
  statsPing:
    enabled: false                      # OFF by default (safe)
    schedule: "*/5 * * * *"             # every 5 minutes (default)
    timeZone: "Etc/UTC"                 # optional
    concurrencyPolicy: Forbid
    startingDeadlineSeconds: 120
    successfulJobsHistoryLimit: 3
    failedJobsHistoryLimit: 3
    backoffLimit: 2

    image:
      repository: curlimages/curl       # official curl image
      tag: "8.8.0"
      pullPolicy: IfNotPresent

    curl:
      maxTimeSeconds: 60
      retries: 2
      retryDelaySeconds: 2

    # How to reach Manager from inside the cluster
    target:
      mode: "service"                   # "service" (in-cluster) or "ingress"
      serviceName: ""                   # defaults to .Values.manager.name (manager) if empty
      port:                              # defaults to .Values.manager.ports.service (80) if empty
      url: ""                           # used only when mode = "ingress"

  refreshSessionsCleanup:
    enabled: false
    schedule: "30 2 * * *"      # every night at 02:30
    timeZone: "Asia/Jerusalem"
    concurrencyPolicy: Forbid
    startingDeadlineSeconds: 300
    successfulJobsHistoryLimit: 3
    failedJobsHistoryLimit: 3
    backoffLimit: 2

    image:
      repository: curlimages/curl
      tag: "8.8.0"
      pullPolicy: IfNotPresent

    curl:
      maxTimeSeconds: 60
      retries: 2
      retryDelaySeconds: 2

    target:
      mode: "service"
      serviceName: "manager"
      port: 80

manager:
  name: manager
  labels:
    selectorKey: io.kompose.service
    selectorValue: manager
  image:
    name: manager
    # tag: defaults to global.environment, set by CI/CD
  ports:
    container: 5001
    service: 80
  service:
    type: ClusterIP
  dapr:
    appId: manager
    appPort: 5001
  env:
    ASPNETCORE_URLS: "http://+:5001"
    Jwt__Secret: ""
    Jwt__Issuer: ""
    Jwt__Audience: ""
    Jwt__RefreshTokenHashKey: ""
  secrets:
    serviceBus:
      name: azure-service-bus-secret
      key: AzureServiceBusConnectionString
    signalr:
      name: signalr-connection
      key: SignalRConnectionString
    jwt:
      name: manager-appsettings
      keys:
        secret: Jwt__Secret
        issuer: Jwt__Issuer
        audience: Jwt__Audience
        refresh: Jwt__RefreshTokenHashKey
      data:
        - remote: manager-jwt-secret
          key: Jwt__Secret
        - remote: manager-jwt-issuer
          key: Jwt__Issuer
        - remote: manager-jwt-audience
          key: Jwt__Audience
        - remote: manager-jwt-refreshtokenhashkey
          key: Jwt__RefreshTokenHashKey
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"

engine:
  name: engine
  labels:
    selectorKey: io.kompose.service
    selectorValue: engine
  image:
    name: engine
    # tag: defaults to global.environment, set by CI/CD
  ports:
    container: 5002
    service: 5002
  service:
    type: ClusterIP
  dapr:
    appId: engine
    appPort: 5002
  env:
    ASPNETCORE_URLS: "http://+:5002"
    AzureOpenAI__Endpoint: "https://france-teachin-open-ai.openai.azure.com/"
    AzureOpenAI__ApiKey: ""
    AzureOpenAI__DeploymentName: "gpt-4.1-mini"
    AzureOpenAI__ModelId: "gpt-4o-mini"
    AzureSpeech__SubscriptionKey: ""
    AzureSpeech__Region: "eastus"
    AzureSpeech__DefaultVoice: "he-IL-HilaNeural"
    AzureSpeech__TimeoutSeconds: "70"
  secrets:
    serviceBus:
      name: azure-service-bus-secret
      key: AzureServiceBusConnectionString
    app:
      name: engine-appsettings
      keys:
        openaiApiKey: AzureOpenAI__ApiKey
        speechKey: AzureSpeech__SubscriptionKey
      data:
        - remote: engine-azureopenai-apikey
          key: AzureOpenAI__ApiKey
        - remote: engine-azurespeech-subscriptionkey
          key: AzureSpeech__SubscriptionKey
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"

accessor:
  name: accessor
  labels:
    selectorKey: app
    selectorValue: accessor
  image:
    name: accessor
    # tag: defaults to global.environment, set by CI/CD
  ports:
    container: 5003
    service: 80
  service:
    type: ClusterIP
  dapr:
    appId: accessor
    appPort: 5003
  env:
    ASPNETCORE_URLS: "http://+:5003"
  secrets:
    serviceBus:
      name: azure-service-bus-secret
      key: AzureServiceBusConnectionString
    postgres:
      name: postgres-connection
      key: PostgreSQLConnectionString
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"

dapr:
  # Shared connection for Service Bus components
  connection:
    secretName: azure-service-bus-secret
    secretKey:  AzureServiceBusConnectionString

  # Prefix queue names with global.namePrefix (e.g., test123-queue)
  prefixEntityNames: false

  configuration:
    name: dapr-config

  # PubSub (optional)
  pubsub:
    enabled: false
    name: servicebus-pubsub
    disableEntityManagement: "true"
    scopes: [manager, engine, accessor]

  # Redis state store (optional)
  stateStore:
    enabled: true
    name: statestore
    redis:
      secretName: "redis-connection"
      hostKey: "redis-hostport"
      passwordKey: "redis-password"
      enableTLS: "true"
      redisDB: "5"  # default Redis database index
      options:
        dialTimeout: "30s"
        readTimeout: "30s"
        writeTimeout: "30s"
        poolTimeout: "30s"
        idleTimeout: "300s"
        maxConnAge: "30m"