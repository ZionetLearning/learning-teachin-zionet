version: "3.9"

services:

  # -------------------- Dapr placement service --------------------

  placement:
      image: "daprio/placement:latest"
      container_name: placement
      command: ["./placement", "-port", "50006"]
      ports:
        - "50006:50006"
      networks:
        - microservice-net
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:50006/health"]
        interval: 10s
        retries: 3


 # -------------------- stats-scheduler cron job --------------------
 # A simple Alpine-based container that runs a cron job every 5 minutes to ping the Manager service's stats computation endpoint.
 
 # stats-scheduler:
  #   image: alpine:3.20
  #   command: >
  #     sh -lc "
  #     apk add --no-cache curl &&
  #     printf '*/5 * * * * /usr/bin/curl -sS --fail -X POST http://host.docker.internal:5001/internal/compute-stats/ping || echo CRON-FAIL >&2\n' > /etc/crontabs/root &&
  #     crond -f -l 8 -L /dev/stdout
  #     "
  #   restart: unless-stopped


# -------------------- Azurite Blob storage Emulator  --------------------

  azurite:
     image: mcr.microsoft.com/azure-storage/azurite
     container_name: azurite
     command: "azurite --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0"
     ports:
       - "10000:10000"   # Blob
       - "10001:10001"   # Queue
       - "10002:10002"   # Table
     environment:
       AZURITE_ACCOUNTS: "devstoreaccount1:MF9oMXNAU2FtcGxlS2V5X2Jhc2U2NF9GT1JfREVWLj09"
     healthcheck:
       test: ["CMD", "curl", "-f", "http://localhost:10000/devstoreaccount1?comp=list"]
       interval: 5s
       timeout: 2s
       retries: 20
     networks:
      - microservice-net

  # -------------------- Azure SQL Edge --------------------
  sqledge:
    container_name: sqledge
    image: mcr.microsoft.com/azure-sql-edge:latest
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "${MSSQL_SA_PASSWORD}"
    ports:
      - "1433:1433"  # Optional: expose for local dev
    # volumes:
    #   - sqledge-data:/var/opt/mssql
    networks:
      - sb-emulator
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/bin/bash", "-c", "nc -z localhost 1433"]
      interval: 10s
      retries: 3

  # -------------------- Azure Service Bus Emulator --------------------
  servicebus-emulator:
    container_name: servicebus-emulator
    image: mcr.microsoft.com/azure-messaging/servicebus-emulator:latest
    pull_policy: always
    volumes:
       - ./servicebus-emulator:/ServiceBus_Emulator/ConfigFiles
    ports:
      - "5672:5672"       
      - "5671:5671"
      - "5300:5300"
    environment:
      SQL_SERVER: sqledge
      MSSQL_SA_PASSWORD: "YourStrongP@ssword123!"
      ACCEPT_EULA: "Y"
    depends_on:
      - sqledge
    networks:
      sb-emulator:
        aliases:
          - sbemulatorns
    healthcheck:
      test: ["CMD", "/bin/bash", "-c", "nc -z localhost 5672"]
      interval: 5s
      timeout: 5s
      retries: 15

# ------------------------- PostgreSQL DB --------------------------
  postgres:
    image: postgres:17.5
    container_name: postgres-db
    restart: always
    environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
        POSTGRES_DB: postgres_db
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
        interval: 10s
        retries: 5
    ports:
      - "5432:5432"  
    volumes:
        - pgdata:/var/lib/postgresql/data
    networks:
        - microservice-net
  

  # ---------------------- pgAdmin for PostgreSQL ----------------------
  pgadmin:
      image: dpage/pgadmin4
      container_name: pgadmin
      environment:
        PGADMIN_DEFAULT_EMAIL: admin@admin.com
        PGADMIN_DEFAULT_PASSWORD: admin
      ports:
        - "8080:80"
      networks:
              - microservice-net
      healthcheck:
        test: ["CMD-SHELL", "curl -f http://localhost:80/"]
        interval: 10s
        retries: 3

  # ---------------------- Redis ----------------------
  redis:
      image: redis:6.2
      container_name: redis
      ports:
        - "6379:6379"
      restart: unless-stopped
      networks:
        - microservice-net
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 3s
        timeout: 2s
        retries: 10

  # ------------------------ Manager Service ---------------------------
  manager:
    build:
      context: ./Manager
    container_name: manager
    ports:
      - "5001:5001"
    environment:
      - ASPNETCORE_URLS=http://+:5001
      - ASPNETCORE_ENVIRONMENT=Development
      - Avatars__StorageConnectionString=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=MF9oMXNAU2FtcGxlS2V5X2Jhc2U2NF9GT1JfREVWLj09;BlobEndpoint=http://host.docker.internal:10000/devstoreaccount1

    depends_on:
      - azurite
      - servicebus-emulator
      - redis
    networks:
      - microservice-net
      - sb-emulator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 10s
      retries: 3


  manager-dapr:
    image: "daprio/daprd:latest"
    container_name: manager-dapr
    depends_on:
      manager:
        condition: service_started
    command: [
      "./daprd",
      "-app-id", "manager",
      "-app-port", "5001",
      "-placement-host-address", "placement:50006",
      "-dapr-http-port", "3500",
      "--resources-path", "/dapr/components",
      "-config", "/dapr/config.yaml"
    ]
    volumes:
      - ./dapr:/dapr
    network_mode: "service:manager"
    healthcheck:
        test: ["CMD", "nc", "-z", "localhost", "3500"]
        interval: 10s
        retries: 3


      # ------------------------ ApiGateway Service ---------------------------

  apigateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    container_name: apigateway
    ports:
      - "5280:5280"
    depends_on:
      - manager
    networks:
      - microservice-net

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5280/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ------------------------ Engine Service ---------------------------
  engine:
    build:
      context: ./Engine
    container_name: engine
    ports:
      - "5002"
    environment:
      - ASPNETCORE_URLS=http://+:5002
    depends_on:
      - servicebus-emulator
      - redis
    networks:
      - microservice-net
      - sb-emulator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 10s
      retries: 3


  engine-dapr:
    image: "daprio/daprd:latest"
    container_name: engine-dapr
    depends_on:
      engine:
        condition: service_started
    command: [
      "./daprd",
      "-app-id", "engine",
      "-app-port", "5002",
      "-placement-host-address", "placement:50006",
      "-dapr-http-port", "3500",
      "--resources-path", "/dapr/components",
      "-config", "/dapr/config.yaml"
    ]
    volumes:
      - ./dapr:/dapr
    network_mode: "service:engine"
    healthcheck:
        test: ["CMD", "nc", "-z", "localhost", "3500"]
        interval: 10s
        retries: 3

  # ------------------------ Accessor Service ---------------------------
  accessor:
    build:
      context: ./Accessor
    container_name: accessor
    ports:
      - "5003:5003"
    environment:
      - ASPNETCORE_URLS=http://+:5003
      - ASPNETCORE_ENVIRONMENT=Development
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB_NAME=postgres_db
      - DB_USER=postgres
      - DB_PASS=postgres
    depends_on:
        redis:
          condition: service_healthy
        postgres:
          condition: service_started
        servicebus-emulator:
          condition: service_started
    networks:
      - microservice-net
      - sb-emulator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 10s
      retries: 3


  accessor-dapr:
    image: "daprio/daprd:latest"
    container_name: accessor-dapr
    depends_on:
      accessor:
        condition: service_started
      redis:
        condition: service_healthy
    command: [
      "./daprd",
      "-app-id", "accessor",
      "-app-port", "5003",
      "-placement-host-address", "placement:50006",
      "-dapr-http-port", "3500",
      "--resources-path", "/dapr/components",
      "-config", "/dapr/config.yaml"
    ]
    volumes:
      - ./dapr:/dapr
    network_mode: "service:accessor"
    healthcheck:
        test: ["CMD", "nc", "-z", "localhost", "3500"]
        interval: 10s
        retries: 3



# ------------------------ Shared Networks ---------------------------
networks:
  microservice-net:
    driver: bridge
  sb-emulator:
    driver: bridge

# ------------------------ Shared Volumes ---------------------------
volumes:
      pgdata:
      # sqledge-data:
