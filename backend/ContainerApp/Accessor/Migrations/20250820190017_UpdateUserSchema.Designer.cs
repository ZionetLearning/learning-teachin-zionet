// <auto-generated />
using System;
using System.Net;
using Accessor.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Accessor.Migrations
{
    [DbContext(typeof(AccessorDbContext))]
    [Migration("20250820190017_UpdateUserSchema")]
    partial class UpdateUserSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Accessor.Models.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "content");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "role");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "threadId");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamptz")
                        .HasColumnName("timestamp")
                        .HasAnnotation("Relational:JsonPropertyName", "timestamp");

                    b.Property<Guid>("UserId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "userId");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.HasIndex("ThreadId", "Timestamp");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Accessor.Models.IdempotencyRecord", b =>
                {
                    b.Property<string>("IdempotencyKey")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExpiresAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("IdempotencyKey");

                    b.ToTable("Idempotency", (string)null);
                });

            modelBuilder.Entity("Accessor.Models.RefreshSessionsRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DeviceFingerprintHash")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("device_fingerprint_hash");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("expires_at")
                        .HasDefaultValueSql("NOW() + INTERVAL '60 days'");

                    b.Property<IPAddress>("IP")
                        .IsRequired()
                        .HasColumnType("inet")
                        .HasColumnName("ip");

                    b.Property<DateTimeOffset>("IssuedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("issued_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTimeOffset>("LastSeenAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("last_seen_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("RefreshTokenHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("refresh_token_hash");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("revoked_at");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("user_agent");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("DeviceFingerprintHash");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("RefreshTokenHash")
                        .IsUnique();

                    b.HasIndex("RevokedAt");

                    b.HasIndex("UserId");

                    b.ToTable("refreshSessions", (string)null);
                });

            modelBuilder.Entity("Accessor.Models.TaskModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "payload");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Accessor.Models.Users.UserModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Accessor.Models.ChatMessage", b =>
                {
                    b.HasOne("Accessor.Models.ChatThread", "Thread")
                        .WithMany("Messages")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("Accessor.Models.ChatThread", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
